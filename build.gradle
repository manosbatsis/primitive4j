import org.springframework.boot.gradle.plugin.SpringBootPlugin

plugins {
	id 'java'
	id 'maven-publish'
	id 'signing'
	alias(libs.plugins.spring.boot) apply(false)
	alias(libs.plugins.spotless) apply(false)
	alias(libs.plugins.freefair.lombok) apply(false)
	alias(libs.plugins.jreleaser)
}
version = "1.0.8"

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(23)
	}
	sourceCompatibility = JavaVersion.VERSION_23
	targetCompatibility = JavaVersion.VERSION_1_8
}

// no top-level jar
tasks.named("jar") {
	enabled = false
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

subprojects() {
	apply plugin: 'java'
	apply plugin: 'java-library'
	apply plugin: 'io.freefair.lombok'
	apply plugin: 'com.diffplug.spotless'
	apply plugin: 'maven-publish'

	spotless {
		java {
			target fileTree('.') {
				include '**/*.java'
				exclude '**/build/**', '**/build-*/**'
			}
			licenseHeaderFile("$rootDir/etc/licenseHeaderFile.txt")
			toggleOffOn()
			palantirJavaFormat()
			importOrder()
			removeUnusedImports()
			trimTrailingWhitespace()
			endWithNewline()
		}
	}

	repositories {
		mavenCentral()
	}

	dependencies {
		// Delegate versions to Spring BOM
		implementation platform(SpringBootPlugin.BOM_COORDINATES)

		testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
		testImplementation("org.junit.jupiter:junit-jupiter")
		testImplementation("org.assertj:assertj-core")
	}

	test {
		useJUnitPlatform()
		testLogging {
			showStandardStreams = true
			events "passed", "skipped", "failed"
		}
	}

	java {
		withJavadocJar()
		withSourcesJar()
	}

	tasks.withType(Javadoc).configureEach {
		options.addStringOption('Xdoclint:-missing', '-quiet')
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				from(components.java)

				pom {
					name = "${project.name}"
					groupId = rootProject.group.toString()
					artifactId = project.name
					version = rootProject.version.toString()
					description = "${rootProject.description}"
					url = "https://github.com/manosbatsis/${rootProject.name}"
					licenses{
						license{
							name = "GNU LESSER GENERAL PUBLIC LICENSE"
							url = "https://www.gnu.org/licenses/lgpl-3.0.html"
						}
					}
					developers{
						developer{
							id = "manosbatsis"
							name="Manos Batsis"
							email="manosbatsis@gmail.com"
						}
					}
					scm {
						connection = "scm:git:git://github.com/manosbatsis/${rootProject.name}.git"
						developerConnection = "scm:git:ssh://github.com:manosbatsis/${rootProject.name}.git"
						url = "https://github.com/manosbatsis/${rootProject.name}"
					}
				}
			}
		}

		repositories {
			maven {
				url = layout.buildDirectory.dir('staging-deploy')
			}
		}
	}
}

jreleaser {
	signing {
		active = 'RELEASE'
		armored = true
	}
	deploy {
		maven {
			mavenCentral {
				sonatype {
					active = 'RELEASE'
					applyMavenCentralRules = true
					url = 'https://central.sonatype.com/api/v1/publisher'
					subprojects.forEach { subproject ->
						stagingRepositories.add("${subproject.layout.buildDirectory.get()}/staging-deploy")
					}
					retryDelay = 60
					maxRetries = 80
				}
			}
		}
	}
	distributions {
		subprojects.forEach { subproject ->
			register(subproject.name) {
				artifact {
					path.set(subproject.tasks.named<Jar>("jar").get().archiveFile.get().asFile)
				}
				artifact {
					path.set(subproject.tasks.named<Jar>("sourcesJar").get().archiveFile.get().asFile)
					platform.set("java-sources")
				}
				artifact {
					path.set(subproject.tasks.named<Jar>("javadocJar").get().archiveFile.get().asFile)
					platform.set("java-docs")
				}
			}
		}
	}
}